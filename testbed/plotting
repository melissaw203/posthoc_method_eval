# plot differentiated across models


def plot_results(results_df, y_col_name):
    # Calculate median and standard deviation of y_col_name for each correlation value and model
    median_values = results_df.pivot_table(index='Correlation', columns='Model', values=y_col_name, aggfunc='median')
    std_dev_values = results_df.pivot_table(index='Correlation', columns='Model', values=y_col_name, aggfunc='std')

    # Define colors for lines and shaded regions
    colors = ['royalblue', 'forestgreen', 'darkorange']
    light_colors = ['lightsteelblue', 'lightgreen', 'lightsalmon']

    # Plot the lines for each model
    plt.figure(figsize=(12, 8))
    for i, model_name in enumerate(median_values.columns):
        median_similarity = median_values[model_name]
        std_dev_similarity = std_dev_values[model_name]

        plt.plot(median_similarity.index, median_similarity.values, marker='o', markersize=8, label=model_name, color=colors[i])

        # Plot shaded standard deviation
        plt.fill_between(median_similarity.index, median_similarity.values - 0.1 * std_dev_similarity, median_similarity.values + 0.1 * std_dev_similarity, alpha=0.3, color=light_colors[i])

    plt.title('Average Cosine Similarity ' + y_col_name + ' vs Correlation', fontsize=18, fontweight='bold')
    plt.xlabel('Correlation', fontsize=14)
    plt.ylabel('Average Cosine Similarity ' + y_col_name, fontsize=14)
    plt.ylim(0.8, 1.01)
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)
    plt.legend(fontsize=14)
    plt.grid(True, linestyle='--', alpha=0.5)
    plt.tight_layout()  # Adjust layout to prevent clipping of labels
    plt.show()
