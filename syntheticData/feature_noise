import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import gaussian_kde

# Generate a feature vector X with 1000 data points from a normal distribution
n_points = 1000
original_mean = 0
original_std = 1
X = np.random.normal(original_mean, original_std, n_points)

# Define the noise parameter eta (20% of the original variance)
eta = 1

# Calculate the noise to be added: noise is also normally distributed
noise_std = np.sqrt(eta) * original_std
noise = np.random.normal(0, noise_std, n_points)

# Add noise to the original data to generate a noisy dataset X'
X_noisy = X + noise

# Kernel density estimation for the original and noisy data
kde_X = gaussian_kde(X)
kde_X_noisy = gaussian_kde(X_noisy)

# Plotting the density estimation
x_min = min(np.min(X), np.min(X_noisy)) - 1
x_max = max(np.max(X), np.max(X_noisy)) + 1
x_grid = np.linspace(x_min, x_max, 1000)

plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
plt.plot(x_grid, kde_X(x_grid), label='Original Data', color='blue')
plt.fill_between(x_grid, 0, kde_X(x_grid), alpha=0.5, color='blue')
plt.title('Density Estimation of Original Data')
plt.ylim(0,0.5)
plt.xlabel('Value')
plt.ylabel('Density')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(x_grid, kde_X_noisy(x_grid), label='Noisy Data', color='orange')
plt.fill_between(x_grid, 0, kde_X_noisy(x_grid), alpha=0.5, color='orange')
plt.title('Density Estimation of Noisy Data')
plt.ylim(0,0.5)
plt.xlabel('Value')
plt.ylabel('Density')
plt.legend()

plt.tight_layout()
plt.show()
