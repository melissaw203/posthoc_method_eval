from sklearn.neighbors import NearestNeighbors
import numpy as np

def evaluate_explanation_faithfulness_knn(df, model, instance, coefs, k, max_samples=100):
    """
    Evaluate the faithfulness of a single explanation by calculating the RMSE for a single instance using KNN.

    :param df: DataFrame containing the instances and target.
    :param model: Trained model that makes predictions.
    :param instance: The instance being explained (numpy array).
    :param coefs: Coefficients from the explanation method for the features.
    :param k: Number of nearest neighbors to find.
    :param max_samples: Maximum number of samples to use from df.
    :return: RMSE value.
    """

    # Separate the extra instances and targets
    X_extra = df.drop('Target', axis=1)[max_samples:].to_numpy()
    y_extra = df['Target'][max_samples:].to_numpy()

    # Fit the KNN model on the extra instances
    knn = NearestNeighbors(n_neighbors=k, metric='cosine')
    knn.fit(X_extra)

    # Find the k closest points to the instance
    distances, indices = knn.kneighbors([instance], n_neighbors=k)

    # Retrieve the nearest instances
    nearest_instances = X_extra[indices[0]]

    # Predictions using the model for the nearest instances
    nearest_predictions = model.predict(nearest_instances)

    # Calculate the explanation prediction for each nearest instance
    explanation_predictions = np.dot(nearest_instances, coefs)

    # Calculate the RMSE
    rmse = np.sqrt(np.mean((explanation_predictions - nearest_predictions) ** 2))

    return rmse
