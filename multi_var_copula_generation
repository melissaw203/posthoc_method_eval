# %% [markdown]
# # Generalize to 3 dimensions

# %%
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import multivariate_normal, gamma, beta, t

# Set random seed for reproducibility
np.random.seed(42)

# Number of samples
n = 1000

# Correlation matrix
Rho = np.array([[1, 0.4, 0.2], [0.4, 1, -0.8], [0.2, -0.8, 1]])

# Generate samples from multivariate normal distribution
Z = multivariate_normal(mean=[0, 0, 0], cov=Rho).rvs(n)

# Transform samples to uniform marginals
U = np.clip(np.apply_along_axis(lambda x: multivariate_normal.cdf(x, mean=0, cov=1), 1, Z), 0, 1)

# Transform uniform marginals to desired marginals
X = np.column_stack([gamma.ppf(U[:, 0], a=2, scale=1),
                     beta.ppf(U[:, 1], a=2, b=2),
                     t.ppf(U[:, 2], df=5)])

# Plot the trivariate distribution
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(X[:, 0], X[:, 1], X[:, 2], marker='.')
ax.set_xlabel('U1')
ax.set_ylabel('U2')
ax.set_zlabel('U3')
ax.grid(True)
ax.view_init(elev=0, azim=15)
plt.show()


# %% [markdown]
# This as a function

# %%
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import multivariate_normal, gamma, beta, t

def simulate_higher_order_copula(n=1000, seed=None):
    # Set random seed for reproducibility
    np.random.seed(seed)

    # Correlation matrix
    Rho = np.array([[1, 0.4, 0.2], [0.4, 1, -0.8], [0.2, -0.8, 1]])

    # Generate samples from multivariate normal distribution
    Z = multivariate_normal(mean=[0, 0, 0], cov=Rho).rvs(n)

    # Transform samples to uniform marginals
    U = np.clip(np.apply_along_axis(lambda x: multivariate_normal.cdf(x, mean=0, cov=1), 1, Z), 0, 1)

    # Transform uniform marginals to desired marginals
    X = np.column_stack([gamma.ppf(U[:, 0], a=2, scale=1),
                         beta.ppf(U[:, 1], a=2, b=2),
                         t.ppf(U[:, 2], df=5)])

    return X

def plot_higher_order_copula(X):
    # Plot the trivariate distribution
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.scatter(X[:, 0], X[:, 1], X[:, 2], marker='.')
    ax.set_xlabel('U1')
    ax.set_ylabel('U2')
    ax.set_zlabel('U3')
    ax.grid(True)
    ax.view_init(azim=15)
    plt.show()

# Example usage:
# Uncomment the next two lines if you want reproducibility
# seed = 42
# X = simulate_higher_order_copula(n=1000, seed=seed)
X = simulate_higher_order_copula(n=1000)
plot_higher_order_copula(X)


# %% [markdown]
# # Higher Order Function to Generate Synthetic Data via Copulas

# %%
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import multivariate_normal, gamma, beta, t


# Final version to simulate 3 features
def simulate_higher_order_copula(correlation_matrix, marginals, n=1000, seed=None):
    # Set random seed for reproducibility
    np.random.seed(seed)

    # Generate samples from multivariate normal distribution
    Z = multivariate_normal(mean=np.zeros(len(correlation_matrix)), cov=correlation_matrix).rvs(n)

    # Transform samples to uniform marginals
    U = np.clip(np.apply_along_axis(lambda x: multivariate_normal.cdf(x, mean=0, cov=1), 1, Z), 0, 1)

    # Transform uniform marginals to desired marginals
    X = np.column_stack([marginals[i].ppf(U[:, i]) for i in range(len(marginals))])

    return X

# Visualize
def plot_higher_order_copula(X):
    # Plot the trivariate distribution
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.scatter(X[:, 0], X[:, 1], X[:, 2], marker='.')
    ax.set_xlabel('U1')
    ax.set_ylabel('U2')
    ax.set_zlabel('U3')
    ax.grid(True)
    ax.view_init(azim=15)
    plt.show()

# Example usage:
# Set correlation matrix and desired marginals
Rho = np.array([[1, 0.4, 0.2], [0.4, 1, -0.8], [0.2, -0.8, 1]])
marginals = [gamma(a=2, scale=1), beta(a=2, b=2), t(df=5)]

# Uncomment the next two lines if you want reproducibility
# seed = 42
# X = simulate_higher_order_copula(correlation_matrix=Rho, marginals=marginals, n=1000, seed=seed)
X = simulate_higher_order_copula(correlation_matrix=Rho, marginals=marginals, n=1000)
plot_higher_order_copula(X)


# %%
# Second example 

from scipy.stats import multivariate_normal, norm

# High correlation matrix
high_correlation_matrix = np.array([[1, 0.9, 0.8], [0.9, 1, 0.7], [0.8, 0.7, 1]])

# Desired marginals (normal distributions)
high_marginals = [norm(loc=0, scale=1), norm(loc=0, scale=1), norm(loc=0, scale=1)]

# Uncomment the next two lines if you want reproducibility
# seed = 42
# X_high_correlation = simulate_higher_order_copula(correlation_matrix=high_correlation_matrix, marginals=high_marginals, n=1000, seed=seed)
X_high_correlation = simulate_higher_order_copula(correlation_matrix=high_correlation_matrix, marginals=high_marginals, n=1000)
plot_higher_order_copula(X_high_correlation)


# %%
import numpy as np
from scipy.stats import multivariate_normal

# simulate n features
def simulate_higher_order_copula(correlation_matrix, marginals, n=1000, seed=None):
    # Set random seed for reproducibility
    np.random.seed(seed)

    # Get the number of features from the size of the correlation matrix
    m = len(correlation_matrix)

    # Generate samples from multivariate normal distribution
    Z = multivariate_normal(mean=np.zeros(m), cov=correlation_matrix).rvs(n)

    # Transform samples to uniform marginals
    U = np.clip(np.apply_along_axis(lambda x: multivariate_normal.cdf(x, mean=0, cov=1), 1, Z), 0, 1)

    # Transform uniform marginals to desired marginals
    X = np.column_stack([marginals[i].ppf(U[:, i]) for i in range(len(marginals))])

    return X

# Example usage:
# Set correlation matrix and desired marginals
Rho = np.array([[1, 0.4, 0.2], [0.4, 1, -0.8], [0.2, -0.8, 1]])
marginals = [gamma(a=2, scale=1), beta(a=2, b=2), t(df=5)]

# Uncomment the next two lines if you want reproducibility
# seed = 42
# X = simulate_higher_order_copula(correlation_matrix=Rho, marginals=marginals, n=1000, seed=seed)
X = simulate_higher_order_copula(correlation_matrix=Rho, marginals=marginals, n=1000)
print(X.round(2))

# %%
# Example usage:
# Generate a random positive definite matrix for correlation
np.random.seed(42)
psd_matrix = np.random.rand(6, 6)
correlation_matrix = np.dot(psd_matrix, psd_matrix.T)

# Set desired marginals
marginals = [gamma(a=2, scale=1), beta(a=2, b=2), t(df=5), gamma(a=2, scale=1), beta(a=2, b=2), t(df=5)]

# Uncomment the next two lines for reproducibility
# seed = 42
# X = simulate_higher_order_copula(correlation_matrix=correlation_matrix, marginals=marginals, n=1000, seed=seed)
X = simulate_higher_order_copula(correlation_matrix=correlation_matrix, marginals=marginals, n=1000)
print(X.round(2))

# %% [markdown]
# # Previous Attempts

# %%
import numpy as np
import scipy.stats as sp
import matplotlib.pyplot as plt

def generate_synthetic_dataset(n, m, copula_type, correlation, copula_seed, marginals_seed=None):
    '''
    Generate a synthetic dataset with specified parameters.

    Parameters:
        n (int): Number of instances in the dataset.
        m (int): Number of features in each instance.
        copula_type (str): Type of copula ('gaussian' or 't').
        correlation (float): Correlation parameter for the copula.
        copula_seed (int): Seed for reproducibility of the copula.
        marginals_seed (int): Seed for reproducibility of marginals (default is None).

    Returns:
        dataset (numpy.ndarray): Generated synthetic dataset.
    '''

    if marginals_seed is None:
        marginals_seed = copula_seed * 2

    marginals_generator = np.random.default_rng(marginals_seed)

    # Generate marginals for each feature
    marginals = [marginals_generator.normal(0, 1, n) for _ in range(m)]

    # Construct the correlation matrix and Cholesky Decomposition for copula
    copula_rng = np.random.default_rng(copula_seed)
    copula_z = copula_rng.normal(0, 1, size=(m, n))

    rho = np.full((m, m), correlation)
    np.fill_diagonal(rho, 1.0)
    cholesky = np.linalg.cholesky(rho)

    # Apply Cholesky to copula variables
    copula_variables = cholesky @ copula_z

    # Apply copula to marginals
    if copula_type == 'gaussian':
        copula_samples = sp.norm.cdf(copula_variables, loc=0, scale=1)
    elif copula_type == 't':
        copula_samples = sp.t.cdf(copula_variables, df=2, loc=0, scale=1)  # Example df=2, adjust as needed
    else:
        raise ValueError("Invalid copula_type. Choose 'gaussian' or 't'.")

    # Combine copula samples with marginals to form the synthetic dataset
    dataset = np.column_stack([sp.norm.ppf(copula_samples[:, i], loc=0, scale=1) + marginals[i] for i in range(m)])

    return dataset

def plot_joint_distribution(dataset, n_features):
    # Plot joint distribution for each pair of variables
    fig, axes = plt.subplots(nrows=n_features, ncols=n_features, figsize=(15, 15))

    for i in range(n_features):
        for j in range(n_features):
            if i != j:
                axes[i, j].scatter(dataset[:, i], dataset[:, j], alpha=0.5)
                axes[i, j].set_xlabel(f'Feature {i+1}')
                axes[i, j].set_ylabel(f'Feature {j+1}')
            else:
                axes[i, j].hist(dataset[:, i], bins=30, alpha=0.5)
                axes[i, j].set_xlabel(f'Feature {i+1}')
                axes[i, j].set_ylabel('Frequency')

    plt.tight_layout()
    plt.show()

def plot_joint_distribution_cdf(dataset, n_features):
    # Plot joint distribution CDF for each pair of variables
    fig, axes = plt.subplots(nrows=n_features, ncols=n_features, figsize=(15, 15))

    for i in range(n_features):
        for j in range(n_features):
            if i != j:
                axes[i, j].hist2d(dataset[:, i], dataset[:, j], bins=30, cmap='Blues')
                axes[i, j].set_xlabel(f'Feature {i+1}')
                axes[i, j].set_ylabel(f'Feature {j+1}')
            else:
                axes[i, j].hist(dataset[:, i], bins=30, cumulative=True, density=True, alpha=0.5)
                axes[i, j].set_xlabel(f'Feature {i+1}')
                axes[i, j].set_ylabel('CDF')

    plt.tight_layout()
    plt.show()

# Example usage
n_instances = 1000
n_features = 3
copula_type = 'gaussian'  # or 't' for t-copula
correlation = 0.7
copula_seed = 42

# Generate synthetic dataset
synthetic_data = generate_synthetic_dataset(n_instances, n_features, copula_type, correlation, copula_seed)

# Plot joint distribution for each pair of variables
plot_joint_distribution(synthetic_data, n_features)

# Plot joint distribution CDF for each pair of variables
plot_joint_distribution_cdf(synthetic_data, n_features)


# %%
import matplotlib.pyplot as plt

# Example usage
n_instances = 1000
n_features = 3
copula_type = 'gaussian'  # or 't' for t-copula
correlation = 0.7
copula_seed = 42

# Generate synthetic dataset
synthetic_data = generate_synthetic_dataset(n_instances, n_features, copula_type, correlation, copula_seed)

# Plot the scatter plots to visualize the synthetic data
fig, axes = plt.subplots(nrows=1, ncols=n_features, figsize=(15, 4))

for i in range(n_features):
    axes[i].scatter(synthetic_data[:, i], synthetic_data[:, (i + 1) % n_features], alpha=0.5)
    axes[i].set_title(f'Feature {i+1} vs Feature {(i + 1) % n_features + 1}')

plt.tight_layout()
plt.show()



